---
description: 
globs: 
alwaysApply: true
---
### Project Overview

This is the **SmythOS SRE (Smyth Runtime Environment)** monorepo, an advanced agentic AI platform that provides a comprehensive runtime environment for building and managing AI agents. The system includes LLM management, vector databases, storage, security, and agent orchestration capabilities.

**Monorepo Structure**:
*   `packages/core` - Main runtime library (@smythos/sre)
*   `packages/sdk` - Developer SDK (@smythos/sdk)
*   `packages/cli` - Command line interface
*   `examples/` - Example implementations and demos

---
### Contributor Setup
---
**Objective**: Standardize development environments for all contributors.

1.  **Install Package Manager**: This project requires `pnpm`. Install it globally.
    ```bash
    npm install -g pnpm
    ```
2.  **SSH Key**: Ensure an ED25519 SSH key without a passphrase exists at `~/.ssh/id_ed25519`.
3.  **SSH Agent**: Configure `~/.bashrc` or equivalent to manage a persistent `ssh-agent`.
    ```bash
    # --- SSH Agent Management ---
    if ! pgrep -u "$USER" ssh-agent > /dev/null; then
        ssh-agent -s > ~/.ssh/agent_env
    fi
    if [ -f ~/.ssh/agent_env ]; then
        source ~/.ssh/agent_env >/dev/null
    fi
    if ! ssh-add -l 2>/dev/null | grep -q "id_ed25519"; then
        ssh-add ~/.ssh/id_ed25519
    fi
    # --- End SSH Agent Management ---
    ```
4.  **SSH Config**: Create `~/.ssh/config` for GitHub authentication.
    ```
    Host github.com
        User git
        IdentityFile ~/.ssh/id_ed25519
        IdentitiesOnly yes
    ```
5.  **Git Config**: Set global user name and email.
    ```bash
    git config --global user.name "kittenhoarder"
    git config --global user.email "owenperry@gmail.com"
    ```
6.  **Permissions**: Set strict permissions for SSH files.
    ```bash
    chmod 600 ~/.ssh/id_ed25519
    chmod 644 ~/.ssh/id_ed25519.pub
    ```

---
### REQUIRED RULES
---

#### 0. Output Behavior
0.1. Blunt, directive language. No emojis, filler, or apologies.
0.2. Ask questions only when a decision is required or clarification is necessary.

#### 1. Safety & Security
1.1. Block dependencies with unpatched HIGH/CRITICAL CVEs. Document mitigation for any MEDIUM CVEs.
1.2. Run `pnpm audit` before submitting pull requests; resolve all vulnerabilities.
1.3. No plaintext secrets in the codebase. Use environment variables or a vault solution.

#### 2. Environment & Tooling
2.1. **Package Manager**: Use `pnpm` for all package management. Do not use `npm` or `yarn`.
2.2. Authenticate with GitHub exclusively via the configured SSH key.
2.3. Use the pinned Node.js version specified in `.nvmrc`.
2.4. Use the pinned `pnpm` version specified in `package.json`.
2.5. The required code formatter is Prettier, using the version and configuration defined in the workspace.

#### 4. Dependency Management
4.1. New dependencies must have ≥ 200 GitHub stars, a release within the last 12 months, and zero unpatched HIGH/CRITICAL CVEs. Pin versions in `package.json`.
4.2. Verify the legitimacy of new packages to prevent typosquatting.

#### 5. Source-of-Truth & Git Workflow
5.0. The canonical remote is `git@github.com:kittenhoarder/smythos.git`.
5.1. Commit messages must follow the Conventional Commits specification.
5.2. `git push --force` is prohibited on `main` and `develop` branches.
5.3. Merge to `main` must use a merge commit (`--no-ff`).
5.4. All code changes must be submitted via pull requests from `feature/*`, `fix/*`, or `preview/*` branches. [[memory:285672]]

#### 7. Code Quality
7.1. All code must pass `pnpm lint` and `tsc --noEmit` checks before merge. Errors are blocking; warnings are not.
7.2. **Naming Conventions**: File extensions must follow project standards:
    *   `.service.ts`: Top-level subsystem services
    *   `.class.ts`: Classes and connectors/managers
    *   `.utils.ts`: Utility function collections
    *   `.helper.ts`: Task-specific helper objects
    *   `.handler.ts`: Event handlers
    *   `.mw.ts`: Middleware
7.3. Generated files must contain only one programming language, and the file extension must match the language.

#### 8. CI/CD & Observability
8.1. The CI pipeline must pass all linting (`pnpm lint`), testing (`pnpm test:run`), and build (`pnpm build`) stages.
8.2. The monorepo build (`pnpm build`) must succeed across all workspace packages. A failing package build is a failing CI run.

#### 10. Rollback & Feature Flags
10.1. Deployable changes to the `studio` or agent runtime must include manual rollback steps in the pull request description.
10.2. New user-facing features in the `studio` application must be introduced with a feature flag.

#### 11. Licensing Compliance
11.1. Dependencies must use MIT, Apache-2.0, BSD-3-Clause, or ISC licenses. A license scan must pass before merge.

#### 12. Violation Handling
12.1. On rule breach, stop generation immediately and output: `ERROR: Rule <number> violated.`

#### 13. Failure Recovery
13.1. On operational failure, state a corrective plan.
13.2. Errors must not be swallowed. Throw exceptions or return a `Result` type. Log the full stack trace and contextual metadata.

#### 14. Semantic-Version Releases
14.1. Tag every merge to `main` that constitutes a release with a SemVer tag (e.g., `v1.2.3`).

---
### BEST PRACTICE GUIDELINES
---

#### 5. Source-of-Truth & Git Workflow
5.1. Commit lockfiles (`pnpm-lock.yaml`) with any dependency changes.
5.2. Keep local branches synchronized with the remote. Delete stale branches after merging.

#### 7. Code Quality
7.1. Maintain overall test coverage ≥ 85% with Vitest. New modules should meet this target before merge.
7.2. Use JSDoc headers for exported functions and classes. Use inline comments to explain the "why," not the "what."
7.3. Do not introduce new test utilities or significant testing pattern changes without explicit approval.
7.4. All `TODO` comments must include a ticket/issue reference or be marked `LOW_PRIORITY`.

#### 8. CI/CD & Observability
8.1. After implementing a code change, push to a `feature/*` or `preview/*` branch to trigger a preview deployment for validation. [[memory:285672]]
8.2. Use `winston` for structured logging in backend services. `console.log` is permissible for CLI output and frontend debugging.

#### 9. Documentation & Diagrams
9.1. Update `README.md` files, `typedoc` comments, and any relevant diagrams with every code change.
9.2. Use Mermaid to maintain diagrams of the SRE architecture.
9.3. Maintain `CONTRIBUTING.md` with clear instructions for local setup, branch strategy, and testing.